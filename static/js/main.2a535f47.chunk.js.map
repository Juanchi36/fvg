{"version":3,"sources":["assets/pokeball.svg","contexts/LanguageContext.js","components/Switches/LanguageSwitch.js","components/AppBar/TopBar.js","contexts/ImageContext.js","contexts/UrlContext.js","contexts/PokeContext.js","components/Tables/PokeTable.js","components/Cards/TableCard.js","components/Cards/ImageCard.js","views/Content/Content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LanguageContext","createContext","RedSwitch","withStyles","switchBase","color","red","backgroundColor","checked","track","Switch","LanguageSwitch","useContext","language","setLanguage","React","useState","checkedA","checkedB","checkedC","state","setState","FormGroup","Typography","component","style","Grid","container","alignItems","spacing","item","role","aria-label","onChange","event","target","name","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","title","TopBar","classes","className","AppBar","position","Toolbar","variant","ImageContext","UrlContext","PokeContext","table","minWidth","borderColor","width","marginTop","cell","padding","pagination","PokeTable","data","render","setRender","useEffect","rowsTemp","map","pokemon","push","number","id","experience","base_experience","image","setRows","nextUrl","prevUrl","setNextUrl","setImage","setCurrentPokemon","rows","handleOnMouseLeave","TableContainer","Paper","boxShadow","Table","TableHead","TableRow","TableCell","align","TableBody","row","key","onMouseEnter","onMouseLeave","onClick","setTimeout","cursor","TablePagination","count","length","rowsPerPage","page","rowsPerPageOptions","labelDisplayedRows","onChangePage","newPage","backIconButtonProps","disabled","nextIconButtonProps","minHeight","bullet","display","margin","transform","fontSize","pos","marginBottom","TableCard","getPokemonList","setPrevUrl","pokemonList","setPokemonList","a","axios","get","then","response","next","previous","promises","results","result","url","Promise","all","Card","CardHeader","ImageCard","currentPokemon","description","setDescription","getEntries","entries","effect_entries","console","log","charAt","toUpperCase","slice","src","alt","listStyleType","types","type","index","effect","pokeBall","paper","height","control","items","Content","textAlign","xs","sm","App","Provider","value","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2a535f47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.2b4798f5.svg\";","import { createContext } from 'react';\n\nconst LanguageContext = createContext();\n\nexport default LanguageContext;","import React, { useContext } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Switch from '@material-ui/core/Switch';\nimport LanguageContext from '../../contexts/LanguageContext';\n\nconst RedSwitch = withStyles({\n  switchBase: {\n    color: red[300],\n    '&$checked': {\n      color: red[400],\n    },\n    '&$checked + $track': {\n      backgroundColor: 'gray',\n    },\n  },\n  checked: {},\n  track: {},\n})(Switch);\n\nexport default function LanguageSwitch() {\n  const { language, setLanguage } = useContext(LanguageContext);\n  const [state, setState] = React.useState({\n    checkedA: true,\n    checkedB: true,\n    checkedC: true,\n  });\n\n  const handleChange = (event) => {\n    setLanguage(!language);\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  return (\n    <FormGroup>\n      <Typography component=\"div\" style={{ color: 'white' }}>\n        <Grid component=\"label\" container alignItems=\"center\" spacing={1}>\n          <Grid item>\n            <span role=\"img\" aria-label=\"Spain flag\">🇩🇪</span>\n          </Grid>\n          <Grid item>\n            <RedSwitch checked={state.checkedA} onChange={handleChange} name=\"checkedA\" />\n          </Grid>\n          <Grid item>\n            <span role=\"img\" aria-label=\"UK flag\">🇬🇧</span>\n          </Grid>\n        </Grid>\n      </Typography>\n    </FormGroup>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport LanguageSwitch from '../Switches/LanguageSwitch';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    color: 'white'\n  },\n}));\n\nexport default function TopBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"transparent\">\n        <Toolbar>\n          <Typography variant=\"h4\" className={classes.title} color=\"error\">\n            Pokédex\n          </Typography>\n          <LanguageSwitch />\n        </Toolbar>  \n      </AppBar>\n    </div>\n  );\n}","import { createContext } from 'react';\n\nconst ImageContext = createContext();\n\nexport default ImageContext;","import { createContext } from 'react';\n\nconst UrlContext = createContext();\n\nexport default UrlContext;","import { createContext } from 'react';\n\nconst PokeContext = createContext();\n\nexport default PokeContext;","import React, { useEffect, useState, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport ImageContext from '../../contexts/ImageContext';\nimport UrlContext from '../../contexts/UrlContext';\nimport PokeContext from '../../contexts/PokeContext';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 350,\n    backgroundColor: '#282c34',\n    borderColor: '#282c34',\n    width: '90%',\n    marginTop: 10,\n  },\n  cell: {\n    color: 'white',\n    padding: '10px 5px',\n  },\n  pagination: {\n    color: 'white',\n  },\n});\n\nfunction PokeTable({ data, render, setRender }) {\n  useEffect(() => {\n    if (data) {\n      let rowsTemp = [];\n      data.map(pokemon => {\n        rowsTemp.push({\n          number: pokemon.data.id,\n          name: pokemon.data.name,\n          experience: pokemon.data.base_experience,\n          image: ''\n        });\n        return true;\n      });\n      setRows(rowsTemp);\n    }\n  }, [data]);\n  const classes = useStyles();\n  const { nextUrl, prevUrl, setNextUrl } = useContext(UrlContext);\n  const { setImage } = useContext(ImageContext);\n  const { setCurrentPokemon } = useContext(PokeContext);\n\n  const [rows, setRows] = useState([]);\n\n  const handleOnMouseEnter = (id) => {\n    setImage(`https://pokeres.bastionbot.org/images/pokemon/${id}.png`);\n  };\n  const handleOnMouseLeave = () => {\n    setImage('');\n  };\n  const handleClick = (id) => {\n    data.map(pokemon => {\n      if (pokemon.data.id === id) {\n        setCurrentPokemon(pokemon.data);\n        setTimeout(() => {\n          setCurrentPokemon({});\n        }, 8000);\n      }\n      return true;\n    })\n  };\n\n  const handleChangePage = (event, newPage) => {\n    if (newPage < 0) {\n      setNextUrl(prevUrl);\n    }\n    setRender(!render);\n  };\n\n  return (\n    <div>\n      <TableContainer component={Paper} style={{ backgroundColor: '#282c34', boxShadow: 'none' }}>\n        <Table className={classes.table} aria-label=\"simple table\" >\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell} align=\"justify\" >Order</TableCell>\n              <TableCell className={classes.cell} align=\"justify\" >Name</TableCell>\n              <TableCell className={classes.cell} align=\"center\">Experience</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <TableRow\n                key={row.number}\n                onMouseEnter={() => handleOnMouseEnter(row.number)}\n                onMouseLeave={handleOnMouseLeave}\n                onClick={() => handleClick(row.number)}\n                style={{ cursor: 'pointer' }}\n              >\n                <TableCell className={classes.cell} align=\"justify\">{row.number}\n                </TableCell>\n                <TableCell className={classes.cell} align=\"justify\">{row.name}</TableCell>\n                <TableCell className={classes.cell} align=\"center\">{row.experience}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TablePagination\n          className={classes.pagination}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={[]}\n          page={[]}\n          rowsPerPageOptions={[]}\n          labelDisplayedRows={() => { }}\n          onChangePage={handleChangePage}\n          backIconButtonProps={!prevUrl ? { disabled: true } : null}\n          nextIconButtonProps={!nextUrl ? { disabled: true } : null}\n        />\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default PokeTable;","import React, { useEffect, useState, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport PokeTable from '../Tables/PokeTable';\nimport axios from 'axios';\nimport UrlContext from '../../contexts/UrlContext';\nimport LanguageContext from '../../contexts/LanguageContext';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    minHeight: '70vh',\n    backgroundColor: '#282c34',\n    borderColor: '#282c34',\n    boxShadow: '5px 5px 5px #131518',\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n    color: 'white',\n    marginTop: 15,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nfunction TableCard() {\n  const [render, setRender] = useState(false);\n  const { language } = useContext(LanguageContext);\n  useEffect(() => {\n    getPokemonList();\n    // eslint-disable-next-line\n  }, [render]);\n\n  const classes = useStyles();\n  const { nextUrl, setNextUrl, setPrevUrl } = useContext(UrlContext);\n  const [pokemonList, setPokemonList] = useState([]);\n\n  const getPokemonList = async () => {\n    let list;\n    axios.get(nextUrl).then(response => {\n      setNextUrl(response.data.next);\n      setPrevUrl(response.data.previous);\n      const pokemons = response.data.results;\n      const promises = pokemons.map(result => {\n        return axios.get(result.url);\n      })\n      Promise.all(promises).then(response => {\n        list = response;\n        setPokemonList(list);\n      })\n    });\n  };\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardHeader className={classes.title} title={!language ? 'Verfügbare Pokémons' : 'Available Pokémons'} />\n      <PokeTable data={pokemonList} render={render} setRender={setRender} />\n    </Card>\n  );\n};\n\nexport default TableCard;","import React, { useContext, useEffect, useState } from 'react';\nimport pokeBall from '../../assets/pokeball.svg';\nimport './ImageCard.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport ImageContext from '../../contexts/ImageContext';\nimport PokeContext from '../../contexts/PokeContext';\nimport LanguageContext from '../../contexts/LanguageContext';\nimport axios from 'axios';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    minHeight: '70vh',\n    backgroundColor: '#282c34',\n    borderColor: '#282c34',\n    boxShadow: '5px 5px 5px #131518',\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n    color: 'white',\n    marginTop: 15,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nfunction ImageCard() {\n  const classes = useStyles();\n  const { image } = useContext(ImageContext);\n  const { currentPokemon } = useContext(PokeContext);\n  const { language } = useContext(LanguageContext);\n  const [description, setDescription] = useState([]);\n  useEffect(() => {\n    if (currentPokemon.id) {\n      getEntries();\n    }\n    // eslint-disable-next-line\n  }, [currentPokemon.id]);\n\n  const getEntries = async () => {\n    let entries = [];\n    await axios.get(`https://pokeapi.co/api/v2/ability/${currentPokemon.id}/`).then(result => {\n      entries = result.data.effect_entries;\n    });\n    setDescription(entries); console.log(entries)\n  };\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      {!currentPokemon.id ? (\n        <div className=\"Container\">\n          <img src={!image ? pokeBall : image} className={!image ? \"Pokeball\" : \"Pokemon\"} alt=\"pokeball\" />\n        </div>\n      ) : (\n          <div>\n            <CardHeader className={classes.title} title={currentPokemon.name.charAt(0).toUpperCase() + currentPokemon.name.slice(1)} />\n            <div>\n              <img className=\"Image\" src={`https://pokeres.bastionbot.org/images/pokemon/${currentPokemon.id}.png`} alt=\"pokeball\" />\n              <ul style={{ listStyleType: 'none', padding: 0 }}>\n                {currentPokemon.types.map((type, index) => {\n                  return (\n                    <li key={index} style={{ color: 'white' }}>{type.type.name}</li>\n                  )\n                })}\n              </ul>\n              {language && description[1] ? (\n                <p style={{color: 'white', padding: 5}}>{description[1].effect}</p>\n              ) : !language && description[0] ? (\n                <p style={{color: 'white', padding: 5}}>{description[0].effect}</p>\n              ) : null}\n            </div>\n          </div>\n        )}\n    </Card>\n  );\n};\n\nexport default ImageCard;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TableCard from '../../components/Cards/TableCard';\nimport ImageCard from '../../components/Cards/ImageCard';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    width: '90%',\n    // margin: 10\n  },\n  paper: {\n    height: 140,\n    width: 100,\n  },\n  control: {\n    padding: theme.spacing(2),\n  },\n  items: {\n    width: '80%',\n  },\n}));\n\nfunction Content() {\n  const classes = useStyles();\n\n  return (\n    <div style={{ textAlign: '-moz-center', margin: 50 }}>\n      <div style={{ textAlign: '-webkit-center' }}>\n        <Grid container className={classes.root} spacing={3}>\n          <Grid item xs={12} sm={6}>\n            <TableCard />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <ImageCard />\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n};\n\nexport default Content;","import React, { useState } from 'react';\nimport TopBar from './components/AppBar/TopBar';\nimport Content from './views/Content/Content';\nimport ImageContext from './contexts/ImageContext';\nimport UrlContext from './contexts/UrlContext';\nimport PokeContext from './contexts/PokeContext';\nimport LanguageContext from './contexts/LanguageContext';\n\nfunction App() {\n  const [image, setImage] = useState('');\n  const [nextUrl, setNextUrl] = useState('https://pokeapi.co/api/v2/pokemon/?limit=5');\n  const [prevUrl, setPrevUrl] = useState('');\n  const [currentPokemon, setCurrentPokemon] = useState({});\n  const [language, setLanguage] = useState(true);\n  \n  return (\n    <div className=\"App\">\n      <LanguageContext.Provider value={{ language, setLanguage }}>\n        <ImageContext.Provider value={{ image, setImage }}>\n          <UrlContext.Provider value={{ nextUrl, prevUrl, setNextUrl, setPrevUrl }}>\n            <PokeContext.Provider value={{ currentPokemon, setCurrentPokemon }}>\n              <TopBar />\n              <Content />\n            </PokeContext.Provider>\n          </UrlContext.Provider>\n        </ImageContext.Provider>\n      </LanguageContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}